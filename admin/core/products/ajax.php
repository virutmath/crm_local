<?
require_once 'inc_security.php';

//viết theo class Ajax
class ProductAjax extends AjaxCommon
{
    function _loadFormAddCategory()
    {
        parent::_loadFormAddCategory(); // TODO: Change the autogenerated stub
        $array_cat = category_type($this->cat_type, 0);
        $list_cat_parent = array('' => ' -- Là danh mục cha --');
        foreach ($array_cat as $cat_i) {
            $list_cat_parent[$cat_i['cat_id']] = $cat_i['cat_name'];
        }
        $this->add(
            $this->form->text(array(
                'label' => 'Nhập tên',
                'name' => 'cat_name',
                'id' => 'cat_name',
                'require' => 1,
                'errorMsg' => 'Bạn chưa nhập danh mục mặt hàng'
            ))
        );
        $this->add(
            $this->form->select(array(
                'label' => 'Danh mục cha',
                'name' => 'cat_parent_id',
                'id' => 'cat_parent_id',
                'option' => $list_cat_parent,
                'select' => 0
            ))
        );
        $this->add(
            $this->form->ajaxUploadFile(array(
                'label' => 'Ảnh đại diện',
                'name' => 'cat_picture',
                'id' => 'cat_picture',
                'browse_id' => 'browse_img',
                'viewer_id' => 'viewer_img'
            ))
        );
        $this->add(
            $this->form->textarea(array(
                'label' => 'Ghi chú',
                'name' => 'cat_note',
                'id' => 'cat_note'
            ))
        );
    }

    function _loadFormEditCategory()
    {
        parent::_loadFormAddCategory(); // TODO: Change the autogenerated stub
        //lấy ra cat_id cần chỉnh sửa
        $cat_id = getValue('cat_id', 'int', 'POST', 0);
        //lấy ra danh sách danh mục cha
        $array_cat = category_type($this->cat_type, 0);
        $list_cat_parent = array(0 => ' -- Là danh mục cha --');
        foreach ($array_cat as $cat_i) {

            $list_cat_parent[$cat_i['cat_id']] = $cat_i['cat_name'];
        }
        $this->add(
            $this->form->text(array(
                'label' => 'Nhập tên',
                'name' => 'cat_name',
                'id' => 'cat_name',
                'require' => 1,
                'errorMsg' => 'Bạn chưa nhập danh mục mặt hàng',
                'value' => $this->f['cat_name']
            ))
        );
        $this->add(
            $this->form->select(array(
                'label' => 'Danh mục cha',
                'name' => 'cat_parent_id',
                'id' => 'cat_parent_id',
                'option' => $list_cat_parent,
                'selected' => $this->f['cat_parent_id']
            ))
        );
        $this->add(
            $this->form->ajaxUploadFile(array(
                'label' => 'Ảnh đại diện',
                'name' => 'cat_picture',
                'id' => 'cat_picture',
                'browse_id' => 'browse_img',
                'viewer_id' => 'viewer_img',
                'value' => get_picture_path($this->f['cat_picture'])
            ))
        );
        $this->add(
            $this->form->textarea(array(
                'label' => 'Ghi chú',
                'name' => 'cat_note',
                'id' => 'cat_note',
                'value' => $this->f['cat_note']
            ))
        );
    }

    function _loadFormAddRecord()
    {
        parent::_loadFormAddRecord(); // TODO: Change the autogenerated stub
        $list_cat = category_type($this->cat_type);
        $array_cat = array(' -- Chọn danh mục nguyên liệu -- ');
        foreach ($list_cat as $cat) {
            if (!$cat['cat_parent_id']) {
                $array_cat[$cat['cat_id']] = ' ☛ ' . $cat['cat_name'];
            }
            foreach ($list_cat as $cat_child) {
                if ($cat_child['cat_parent_id'] == $cat['cat_id']) {
                    $array_cat[$cat_child['cat_id']] = '&nbsp;&nbsp;&nbsp;&diams;&nbsp;' . $cat_child['cat_name'];
                }
            }
        }
        $array_unit = array('' => ' - Chọn đơn vị tính - ');
        $db_query = new db_query('SELECT * FROM units');
        while ($row = mysqli_fetch_assoc($db_query->result)) {
            $array_unit[$row['uni_id']] = $row['uni_name'];
        }
        unset($db_query);
        $this->add(
            $this->form->text(array(
                'label' => 'Tên hàng',
                'name' => 'pro_name',
                'id' => 'pro_name',
                'require' => 1,
                'errorMsg' => 'Bạn chưa nhập tên mặt hàng'
            ))
        );
        $this->add(
            $this->form->select(array(
                'label' => 'Đơn vị tính',
                'name' => 'pro_unit_id',
                'id' => 'pro_unit_id',
                'option' => $array_unit,
                'selected' => 0,
                'require' => 1,
                'errorMsg' => 'Bạn chưa nhập đơn vị tính'
            ))
        );
        $this->add(
            $this->form->select(array(
                'label' => 'Danh mục',
                'name' => 'pro_cat_id',
                'id' => 'pro_cat_id',
                'option' => $array_cat,
                'selected' => 0
            ))
        );
        $this->add(
            $this->form->number(array(
                'label' => 'Tồn tối thiểu',
                'name' => 'pro_instock',
                'id' => 'pro_instock'
            ))
        );
        $this->add(
            $this->form->text(array(
                'label' => 'Mã hàng tự nhập',
                'name' => 'pro_code',
                'id' => 'pro_code'
            ))
        );
        $this->add(
            $this->form->textarea(array(
                'label' => 'Ghi chú',
                'name' => 'pro_note',
                'id' => 'pro_note'
            ))
        );
        $this->add(
            $this->form->ajaxUploadFile(array(
                'label' => 'Ảnh đại diện',
                'name' => 'pro_image',
                'id' => 'pro_image',
                'browse_id' => 'browse_img',
                'viewer_id' => 'viewer_img'
            ))
        );
    }

    function _loadFormEditRecord()
    {
        $list_cat = category_type($this->cat_type);
        $array_cat = array(' -- Chọn danh mục nguyên liệu -- ');
        foreach ($list_cat as $cat) {
            if (!$cat['cat_parent_id']) {
                $array_cat[$cat['cat_id']] = ' ☛ ' . $cat['cat_name'];
            }
            foreach ($list_cat as $cat_child) {
                if ($cat_child['cat_parent_id'] == $cat['cat_id']) {
                    $array_cat[$cat_child['cat_id']] = '&nbsp;&nbsp;&nbsp;&diams;&nbsp;' . $cat_child['cat_name'];
                }
            }
        }
        $array_unit = array('' => ' - Chọn đơn vị tính - ');
        $db_query = new db_query('SELECT * FROM units');
        while ($row = mysqli_fetch_assoc($db_query->result)) {
            $array_unit[$row['uni_id']] = $row['uni_name'];
        }
        unset($db_query);
        $this->add(
            $this->form->text(array(
                'label' => 'Tên hàng',
                'name' => 'pro_name',
                'id' => 'pro_name',
                'require' => 1,
                'errorMsg' => 'Bạn chưa nhập tên mặt hàng',
                'value' => $this->f['pro_name']
            ))
        );
        $this->add(
            $this->form->select(array(
                'label' => 'Đơn vị tính',
                'name' => 'pro_unit_id',
                'id' => 'pro_unit_id',
                'option' => $array_unit,
                'selected' => $this->f['pro_unit_id'],
                'require' => 1,
                'errorMsg' => 'Bạn chưa nhập đơn vị tính',
            ))
        );
        $this->add(
            $this->form->select(array(
                'label' => 'Danh mục',
                'name' => 'pro_cat_id',
                'id' => 'pro_cat_id',
                'option' => $array_cat,
                'selected' => $this->f['pro_cat_id']
            ))
        );
        $this->add(
            $this->form->number(array(
                'label' => 'Tồn tối thiểu',
                'name' => 'pro_instock',
                'id' => 'pro_instock',
                'value' => $this->f['pro_instock']
            ))
        );
        $this->add(
            $this->form->text(array(
                'label' => 'Mã hàng tự nhập',
                'name' => 'pro_code',
                'id' => 'pro_code',
                'value' => $this->f['pro_code']
            ))
        );
        $this->add(
            $this->form->textarea(array(
                'label' => 'Ghi chú',
                'name' => 'pro_note',
                'id' => 'pro_note',
                'value' => $this->f['pro_note']
            ))
        );
        $this->add(
            $this->form->ajaxUploadFile(array(
                'label' => 'Ảnh đại diện',
                'name' => 'pro_image',
                'id' => 'pro_image',
                'browse_id' => 'browse_img',
                'viewer_id' => 'viewer_img',
                'value' => get_picture_path($this->f['pro_image'])
            ))
        );

    }

    function _listAdd()
    {

        $this->list->add('pro_id', 'Mã hàng', 'string', 0, 0);
        $this->list->add('pro_code', 'Mã có sẵn');
        $this->list->add('pro_name', 'Tên hàng', 'string', 0, 0);
        $this->list->add('pro_unit_id', 'Đơn vị tính');
        $this->list->add('pro_instock', 'Tồn tối thiểu');
        $this->list->add('pro_quantity', 'Tồn kho');
    }

    function _listColumn($row = array())
    {
        global $array_unit;

        $list_column = '';
        $list_column .= '<td class="center" width="100">' . format_codenumber($row['pro_id'], 6, PREFIX_PRODUCT_CODE) . '</td>';
        $list_column .= '<td class="center" width="100">' . $row['pro_code'] . '</td>';
        $list_column .= '<td class="center">' . $row['pro_name'] . '</td>';
        $list_column .= '<td class="center">' . $array_unit[$row['pro_unit_id']] . '</td>';
        $list_column .= '<td class="center">' . $row['pro_instock'] . '</td>';
        return $list_column;
    }

    function listRecord()
    {
        // TODO: Implement listRecord() method.
        global $configuration;
        $cat_id = getValue('cat_id', 'str', 'POST', '');
        $html = '';
        $this->_listAdd();
        $class_context_menu = 'menu-normal';
        //list kho hàng
        $list_stores = array();
        foreach (category_type('stores') as $store) {
            $list_stores[$store['cat_id']] = $store['cat_name'];
        }
        $store_id = getValue('store_id', 'int', 'GET', $configuration['con_default_store']);
        $this->list->addSearch('Kho hàng', 'store_id', 'array', $list_stores, getValue('store_id', 'int', 'GET', $store_id));

        $sql_search = '';
        $sql_search .= ' AND store_id = ' . $store_id . ' ';
        switch ($cat_id) {
            case 'all':
                $this->list->addHiddenHeader($this->cat_field, $cat_id);
                $db_count = new db_count('SELECT count(*) as count
                                          FROM ' . $this->bg_table . '
                                          LEFT JOIN product_quantity ON pro_id = product_id
                                          WHERE 1 ' . $this->list->sqlSearch() . $sql_search);
                $total = $db_count->total;
                unset($db_count);
                $sql = 'SELECT *
                        FROM ' . $this->bg_table . '
                        LEFT JOIN product_quantity ON pro_id = product_id
                        WHERE 1 ' . $this->list->sqlSearch() . $sql_search . '
                        ORDER BY ' . $this->list->sqlSort() . ' ' . $this->id_field . ' ASC
                        ' . $this->list->limit($total);
                //echo $sql;
                $db_listing = new db_query($sql);
                $array_row = $db_listing->resultArray();
                unset($db_listing);
                break;
            case 'trash':
                $this->list->addHiddenHeader($this->cat_field, $cat_id);
                $class_context_menu = 'menu-trash';
                $db_count = new db_count('SELECT count(*) as count
                            FROM trash
                            WHERE tra_table = "' . $this->bg_table . '"');
                $total = $db_count->total;
                unset($db_count);
                $array_row = trash_list($this->bg_table);
                $this->list->limit($total);
                break;
            default :
                $cat_id = (int)$cat_id;
                $this->list->addHiddenCondition($this->cat_field, $cat_id);
                $db_count = new db_count('SELECT count(*) as count
                                          FROM ' . $this->bg_table . '
                                          LEFT JOIN product_quantity ON pro_id = product_id
                                          WHERE 1 ' . $this->list->sqlSearch() . $sql_search . '
                                          AND ' . $this->cat_field . ' = ' . $cat_id);
                $total = $db_count->total;
                unset($db_count);
                $db_listing = new db_query('SELECT *
                                            FROM ' . $this->bg_table . '
                                            LEFT JOIN product_quantity ON pro_id = product_id
                                            WHERE 1 ' . $this->list->sqlSearch() . $sql_search . '
                                            AND ' . $this->cat_field . ' = ' . $cat_id . '
                                            ORDER BY ' . $this->list->sqlSort() . ' ' . $this->id_field . ' ASC
                                            ' . $this->list->limit($total));
                $array_row = $db_listing->resultArray();
                unset($db_listing);
                break;
        }
        $total_row = count($array_row);
        $html .= $this->list->showHeader($total_row);
        $i = 0;
        foreach ($array_row as $row) {
            $list_column = $this->_listColumn($row);
            $i++;
            $html .= $this->list->start_tr($i, $row[$this->id_field], 'class="' . $class_context_menu . ' record-item" onclick="active_record(' . $row[$this->id_field] . ')" data-record_id="' . $row[$this->id_field] . '"');
            $html .= $list_column;
            $html .= $this->list->end_tr();
        }
        $html .= $this->list->showFooter();

        $this->add($html);
    }

    function searchRecord()
    {
        // TODO: Implement searchRecord() method.
        global $configuration;
        //Hàm tìm kiếm ở header
        $cat_id = getValue($this->cat_field, 'str', 'GET', '');
        $html = '';
        $this->_listAdd();
        $class_context_menu = 'menu-normal';
        //list kho hàng
        $list_stores = array();
        foreach (category_type('stores') as $store) {
            $list_stores[$store['cat_id']] = $store['cat_name'];
        }
        $store_id = getValue('store_id', 'int', 'GET', $configuration['con_default_store']);
        $this->list->addSearch('Kho hàng', 'store_id', 'array', $list_stores, getValue('store_id', 'int', 'GET', $store_id));

        $sql_search = '';
        $sql_search .= ' AND store_id = ' . $store_id . ' ';
        switch ($cat_id) {
            case 'all':
                $this->list->addHiddenHeader($this->cat_field, $cat_id);
                $db_count = new db_count('SELECT count(*) as count
                                          FROM ' . $this->bg_table . '
                                          LEFT JOIN product_quantity ON pro_id = product_id
                                          WHERE 1 ' . $this->list->sqlSearch() . $sql_search);
                $total = $db_count->total;
                unset($db_count);
                $db_listing = new db_query('SELECT *
                                            FROM ' . $this->bg_table . '
                                            LEFT JOIN product_quantity ON pro_id = product_id
                                            WHERE 1 ' . $this->list->sqlSearch() . $sql_search . '
                                            ORDER BY ' . $this->list->sqlSort() . ' ' . $this->id_field . ' ASC
                                            ' . $this->list->limit($total));
                $array_row = $db_listing->resultArray();
                unset($db_listing);
                break;
            case 'trash':
                $this->list->addHiddenHeader($this->cat_field, $cat_id);
                $class_context_menu = 'menu-trash';
                $db_count = new db_count('SELECT count(*) as count
                                          FROM trash
                                          WHERE tra_table = "' . $this->bg_table . '"');
                $total = $db_count->total;
                unset($db_count);
                $array_row = trash_list($this->bg_table);
                $this->list->limit($total);
                break;
            default :
                $cat_id = (int)$cat_id;
                $this->list->addHiddenCondition($this->cat_field, $cat_id, 'int');
                $db_count = new db_count('SELECT count(*) as count
                                          FROM ' . $this->bg_table . '
                                          LEFT JOIN product_quantity ON pro_id = product_id
                                          WHERE 1 ' . $this->list->sqlSearch() . $sql_search . '
                                          AND ' . $this->cat_field . ' = ' . $cat_id);
                $total = $db_count->total;
                unset($db_count);
                $db_listing = new db_query('SELECT *
                                            FROM ' . $this->bg_table . '
                                            LEFT JOIN product_quantity ON pro_id = product_id
                                            WHERE 1 ' . $this->list->sqlSearch() . $sql_search . '
                                            AND ' . $this->cat_field . ' = ' . $cat_id . '
                                            ORDER BY ' . $this->list->sqlSort() . ' ' . $this->id_field . ' ASC
                                            ' . $this->list->limit($total));
                $array_row = $db_listing->resultArray();
                unset($db_listing);
                break;
        }
        $total_row = count($array_row);
        $html .= $this->list->showHeader($total_row);
        $i = 0;
        foreach ($array_row as $row) {
            $list_column = $this->_listColumn($row);
            $i++;
            $html .= $this->list->start_tr($i, $row[$this->id_field], 'class="' . $class_context_menu . ' record-item" onclick="active_record(' . $row[$this->id_field] . ')" data-record_id="' . $row[$this->id_field] . '"');
            $html .= $list_column;
            $html .= $this->list->end_tr();
        }
        $html .= $this->list->showFooter();
        $this->add($html);
    }

    //Hàm xử lý import product
    function importProduct () {
        //check quyền
        checkCustomPermission('NHAP_HANG');
        global $admin_id;
        $array_return = array();
        //kiểm tra xem có hóa đơn nào thực hiện ko, nếu có thì exit luôn
        $db_trigger = new db_query('SELECT tri_status FROM triggers WHERE tri_key = "billSubmit" LIMIT 1');
        $trigger = mysqli_fetch_assoc($db_trigger->result);unset($db_trigger);
        if($trigger['tri_status'] == 1) {
            //đang có hóa đơn được thanh toán, exit luôn
            $array_return['error'] = 'Đang có hóa đơn khác được thanh toán, bạn vui lòng thử lại trong giây lát!';
            $this->add($array_return);
            return false;
        }
        //Không có hóa đơn nào đang được xử lý - cập nhật trigger status thành 1 để bắt đầu vào hàm
        $db_update = new db_execute('UPDATE triggers SET tri_status = 1 WHERE tri_key = "billSubmit" LIMIT 1');
        unset($db_update);

        $list_product = getValue('products','arr','POST',array());
        //loại thanh toán
        $pay_type = getValue('pay_type','int','POST',0);
        if($pay_type !== PAY_TYPE_CASH) {
            $pay_type = PAY_TYPE_CARD;
        }
        //tính tổng tiền cần thanh toán của hóa đơn
        $bio_total_money = 0;
        foreach($list_product as $product) {
            $bio_total_money += $product['pro_number'] * $product['pro_price'];
        }
        //insert vào bảng hóa đơn nhập hàng bill_out
        //thời gian nhập hàng
        $bio_start_time = getValue('start_date','int','POST',0);
        //kho hàng
        $bio_store_id = getValue('store_id','int','POST',0);
        //Trạng thái hóa đơn - ghi nợ hay đã thanh toán đủ
        $is_debit = getValue('is_debit','int','POST',0);
        $money_debit = getValue('money_debit','int','POST',0);
        $date_debit = getValue('date_debit','str','POST',0);
        $date_debit_convert = convertDateTime($date_debit);
        if($is_debit) {
            if($date_debit_convert <= time()) {
                //thời gian trả nợ không phù hợp
                $array_return['error'] = 'Thời gian hẹn trả không phù hợp!';
                $this->add($array_return);
                return false;
            }
            if($money_debit <= 0 || $money_debit > $bio_total_money) {
                $array_return['error'] = 'Số tiền trả trước không phù hợp!';
                $this->add($array_return);
                return false;
            }
            if($money_debit == $bio_total_money) {
                //thanh toán hết
                $is_debit = 0;
            }
        }
        //trạng thái thanh toán hóa đơn
        $bio_status = $is_debit ? BILL_STATUS_DEBIT : BILL_STATUS_SUCCESS;
        if($bio_status == BILL_STATUS_DEBIT) {
            //gửi lên money_debit là số tiền trả trước
            //khi lưu vào bio_money_debit ta lưu số tiền còn nợ
            $bio_money_debit = $bio_total_money - $money_debit;
            $bio_date_debit = $date_debit_convert;
        }else {
            $bio_money_debit = 0;
            $bio_date_debit = 0;
        }
        //nhà cung cấp
        $bio_supplier_id = getValue('supplier','int','POST',0);
        //ghi chú
        $bio_note = getValue('note','str','POST','',3);
        //người nhập hàng
        $bio_admin_id = $admin_id;
        $sql_insert = 'INSERT INTO bill_out (bio_start_time,
                                             bio_store_id,
                                             bio_status,
                                             bio_total_money,
                                             bio_supplier_id,
                                             bio_note,
                                             bio_admin_id,
                                             bio_money_debit,
                                             bio_date_debit)
                       VALUES (
                       '.$bio_start_time.',
                       '.$bio_store_id.',
                       '.$bio_status.',
                       '.$bio_total_money.',
                       '.$bio_supplier_id.',
                       "'.$bio_note.'",
                       '.$bio_admin_id.',
                       '.$bio_money_debit.',
                       '.$bio_date_debit.'
                       )';
        $db_insert = new db_execute_return();
        //echo $sql_insert;
        $last_id = $db_insert->db_execute($sql_insert);unset($db_insert);
        if(!$last_id) {
            //lỗi
            $array_return = array('error'=>'Đã có lỗi xảy ra! Vui lòng thử lại sau');
            echo json_encode($array_return);
            exit();
        }
        //sử dụng id của hóa đơn để insert vào bảng bill_out_detail
        foreach($list_product as $product) {
            //mã hóa đơn
            $bid_bill_id = $last_id;
            //mã mặt hàng
            $bid_pro_id = $product['pro_id'];
            //số lượng
            $bid_pro_number = $product['pro_number'];
            //giá nhập
            $bid_pro_price = $product['pro_price'];
            $sql_insert = 'INSERT INTO bill_out_detail (bid_bill_id, bid_pro_id, bid_pro_number, bid_pro_price)
                           VALUES (
                           '.$bid_bill_id.',
                           '.$bid_pro_id.',
                           '.$bid_pro_number.',
                           '.$bid_pro_price.'
                           )';
            $db_insert = new db_execute($sql_insert);unset($db_insert);
            //cộng số lượng vào kho
            //nếu không có bản ghi nào thì insert, không thì update
            $db_update = new db_execute('INSERT INTO product_quantity (product_id,store_id,pro_quantity)
                                         VALUES('.$bid_pro_id.','.$bio_store_id.','.$bid_pro_number.')
                                         ON DUPLICATE KEY UPDATE pro_quantity = pro_quantity + ' . $bid_pro_number);

            unset($db_update);
        }
        //insert 1 phiếu chi
        $fin_date = time();
        $fin_updated_time = time();
        //số tiền chi
        $fin_money = $bio_total_money;
        //nếu ghi nợ thì số tiền chi bằng số tiền trả trước
        if($bio_status == BILL_STATUS_DEBIT) {
            $fin_money = $money_debit;
        }
        //lý do chi
        $fin_reason_other = 'Nhập hàng';
        //mã hóa đơn nhập hàng
        $fin_billcode = $last_id;

        //lấy thong tin nhà cung cấp
        $db_sup = new db_query('SELECT * FROM suppliers WHERE sup_id = ' . $bio_supplier_id . ' LIMIT 1');
        $supplier_data = mysqli_fetch_assoc($db_sup->result);unset($db_sup);
        $fin_username = $supplier_data['sup_name'];
        $fin_address = $supplier_data['sup_address'];
        $fin_cat_id = FINANCIAL_CAT_NHAP_HANG;
        $fin_pay_type = $pay_type;
        $fin_note = $bio_note;
        $fin_admin_id = $admin_id;

        //insert vào bảng financial
        $sql_insert = 'INSERT INTO financial (fin_date, fin_updated_time, fin_money, fin_reason_other, fin_billcode, fin_username, fin_address, fin_cat_id, fin_pay_type, fin_note, fin_admin_id)
                       VALUES (
                       '.$fin_date.',
                       '.$fin_updated_time.',
                       '.$fin_money.',
                       "'.$fin_reason_other.'",
                       "'.$fin_billcode.'",
                       "'.$fin_username.'",
                       "'.$fin_address.'",
                       '.$fin_cat_id.',
                       '.$fin_pay_type.',
                       "'.$fin_note.'",
                       '.$fin_admin_id.'
                       )';
        $db_insert = new db_execute_return();
        $fin_insert_id = $db_insert->db_execute($sql_insert);

        //thực hiện update trigger về 0 để giải phóng function
        $db_update = new db_execute('UPDATE triggers SET tri_status = 0 WHERE tri_key = "billSubmit" LIMIT 1');
        unset($db_update);

        if(!$fin_insert_id) {
            //lỗi
            $array_return = array('error'=>'Đã có lỗi xảy ra! Vui lòng thử lại sau');
            echo json_encode($array_return);
            exit();
        }else {
            $array_return = array('success'=>1, 'fin_id'=>$fin_insert_id, 'bio_id'=>$last_id);
            echo json_encode($array_return);
            exit();
        }
    }
}

// khai bao cac bien global
$array_unit = array();
$db_query = new db_query('SELECT * FROM units');
while ($row = mysqli_fetch_assoc($db_query->result)) {
    $array_unit[$row['uni_id']] = $row['uni_name'];
}
unset($db_query);
// khoi tao doi tuong object ajax va thuc thi
$ajax = new ProductAjax();
$ajax->execute();
